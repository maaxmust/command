const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3000;

// Dein Wetter-API-Key
const apiKey = '9f2a7dab0d2248f89aa23315252802';

app.use(cors());

/* ---------------- NUTZLOS-COMMAND ---------------- */
function generateDailyValue(username) {
    const today = new Date().toISOString().split('T')[0];
    const normalizedUsername = username.toLowerCase();
    const seed = `${normalizedUsername}-${today}`;

    let hash = 0;
    for (let i = 0; i < seed.length; i++) {
        hash = (hash << 5) - hash + seed.charCodeAt(i);
    }

    return Math.abs(hash % 100) + 1;
}

app.get('/nutzlos/:username', (req, res) => {
    const username = req.params.username;
    const value = generateDailyValue(username);
    res.send(`${username}, du bist heute zu ${value}% nutzlos 😜`);
});

/* ---------------- WETTER-COMMAND ---------------- */

// Stadtname formatieren
function capitalizeCityName(city) {
    if (!city || typeof city !== 'string') return city;
    return city.charAt(0).toUpperCase() + city.slice(1);
}

// Wetter-Emoji Funktion
function getWeatherEmoji(description) {
    const text = description.toLowerCase();
    if (text.includes('klar') || text.includes('sonnig')) return '☀️ Klarer Himmel';
    if (text.includes('leicht bewölkt')) return '🌤️ Leicht bewölkt';
    if (text.includes('bewölkt') && !text.includes('stark')) return '🌥️ Bewölkt';
    if (text.includes('stark bewölkt')) return '☁️ Stark bewölkt';
    if (text.includes('regen') && !text.includes('gewitter')) return '🌧️ Regen';
    if (text.includes('nieselregen')) return '🌦️ Nieselregen';
    if (text.includes('schnee')) return '❄️ Schnee';
    if (text.includes('neuschnee')) return '❄️ Neuschnee';
    if (text.includes('schneeregen')) return '🌨️ Schneeregen';
    if (text.includes('graupel')) return '🌨️ Graupel';
    if (text.includes('hagel')) return '🌨️ Hagel';
    if (text.includes('nebel') || text.includes('dunst')) return '🌫️ Nebel';
    if (text.includes('wind')) return '🌬️ Windig';
    if (text.includes('sturm') || text.includes('orkan')) return '🌪️ Sturm';
    if (text.includes('gewitter') || text.includes('blitz')) return '⛈️ Gewitter';
    if (text.includes('regenbogen')) return '🌈 Regenbogen';
    return '🌈 Unbekanntes Wetter';
}

app.get('/weather/:city', async (req, res) => {
    let city = req.params.city.trim();
    const displayCity = capitalizeCityName(city);
    const encodedCity = encodeURIComponent(city);

    try {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 5000);

        const response = await axios.get(
            `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodedCity}&lang=de`,
            { signal: controller.signal }
        );

        clearTimeout(timeout);

        const weather = response.data.current;
        const description = weather.condition.text;
        const tempC = weather.temp_c;
        const emojiText = getWeatherEmoji(description);

        res.send(`Das Wetter in ${displayCity} ist aktuell: ${emojiText} 🌡️ ${tempC}°C`);
    } catch (error) {
        if (error.name === 'AbortError') {
            res.send(`⏳ Oh nein! Die Anfrage für "${displayCity}" hat zu lange gedauert... Versuch’s bitte später nochmal 💫`);
        } else {
            res.send(`🤔 Hm... Irgendwas stimmt hier nicht. Bist du sicher, dass "${displayCity}" ein echter Ort ist? 🌍`);
        }
    }
});

/* ---------------- ROOT ---------------- */
app.get('/', (req, res) => {
    res.send('✅ API läuft! Verwende /nutzlos/DEIN_NAME oder /weather/STADT');
});

/* ---------------- START ---------------- */
app.listen(port, () => {
    console.log(`🚀 Server läuft auf Port ${port}`);
});
